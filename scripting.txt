
Polymorphism:

//breif on what polymorphism is and why it's useful
You have reached the final step in the tutorial and can now make extensive Java programs using Object Oriented programming. Sometimes, however, the classes in a Java program can get confusing and jumbled. To combat this, Java has polymorphism, which allows classes to interact with each other. Polymorphism means that a class can be defined by more than one thing. For example, a dog could be defined as a dog, but could also be defined as an animal or a mammal. The use of this will become apparent by the end of this page.

Subtitle: Inheritance
//breif on why and how inheritace can be used to further abstract
The first step to understanding polymorphism is understanding inheritance. Just as it sounds, it allows classes to inherit traits from other parent classes. For example a dog class, would inherit the traits of a mammal class. This helps organize the Java project as well as reduce redundancy, because you would not have to rewrite a lot of variables and methods that another class already has.

//snippet example

Subtitle: Interfaces
//breif on what they are and how they differ from classes
Interfaces are another way that polymorphism can be implemented in Java. They are very similar to classes, however, there are some key differences. Interfaces allow you to collect a number of abstract (undefined) methods that other classes can then implement. For example, two different sports may have different ways of keeping score, however, both still keep score in some way. An interface called sport can be created to outline a method to keep score. Then each sport can implement the interface and then define the method independently.

//snippet example

//breif on the importance of combining and structuring using these
Using interfaces and inheritance in combination to add polymorphism to a Java program can help clean up the project and allow for more classes and methods to be implemented extremely easily. Instead of having to repeat a lot of the programming for implementing a new feature, the work done on previous features can be inherited or implemented to make the process easier.


//snippet example
